# DG APP Azure Pipelines
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# global variables
variables:
  AZURE_SUBSCRIPTION: "" # default is dg-website https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#use-a-service-connection
  STORAGE: "" # must be lowercase or number
  TEAMS_WEBHOOK: "" # send messages in teams webhook

trigger:
  batch: true # batch changes if true (the default); start a new build for every push if false
  branches:
    include: # branch names which will trigger a build
      - "master"
      - "prod"
      - "devmaster"
      - "features/*"
      - "release/*"
    # exclude: [ string ] # branch names which will not
  # tags:
  #   include: [ string ] # tag names which will trigger a build
  #   exclude: [ string ] # tag names which will not
  paths:
    # include: [web] # file paths which must match to trigger a build
    exclude: [.vscode] # file paths which will not trigger a build

# PR triggers are only supported in GitHub and Bitbucket Cloud.
# For Azure Repos Git, you can configure a branch policy for build validation in order to trigger your pipeline for validation.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?#pr-triggers
# https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?#build-validation
pr:
  autoCancel: true
  branches:
    include: []
jobs:
  - job: web_build # name of the deployment job, A-Z, a-z, 0-9, and underscore
    displayName: Build ${{variables['Build.SourceBranchName']}} to Static Website # friendly name to display in the UI
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - template: .azure-pipelines/steps/build.yml
        parameters:
          BUILD_ENV: ${{variables['Build.SourceBranchName']}}
          PUBLISH_BUILD: true
          PUBLISH_TEST: true

  # check in Mac/Win/Linux with different node versions to avoid breaking cross platform dev
  - job: compatibility_check
    condition: in(variables['Build.SourceBranch'], 'refs/heads/master')
    strategy:
      matrix:
        node_mac:
          node_version: 12.x
          imageName: "macOS-latest"
        node_win:
          node_version: 12.x
          imageName: "windows-latest"
        node10_linux:
          node_version: 10.x
          imageName: "ubuntu-latest"
    variables:
      # disable ComponentGovernanceDetection https://docs.opensource.microsoft.com/tools/cg/policyinjection.html
      skipComponentGovernanceDetection: true
    pool:
      vmImage: $(imageName)
    steps:
      - template: .azure-pipelines/steps/build.yml
        parameters:
          NODE_VERSION: $(node_version)
          CACHE_KEY: '"$(node_version)" | "node_modules" | "$(Agent.OS)" | package-lock.json'

  - template: .azure-pipelines/jobs/deploy-azure.yml
    parameters:
      NAME: "pr_test_deploy"
      AZURE_SUBSCRIPTION: "${{variables.AZURE_SUBSCRIPTION}}"
      CONTAINER_NAME: build
      condition: eq(variables['Build.Reason'], 'PullRequest')
      BLOB_PREFIX: $(Build.BuildID)
      TEAMS_WEBHOOK: ${{variables.TEAMS_WEBHOOK}}
      TEAMS_MESSAGE: |
        **[$(Build.Repository.Name) PR#$(System.PullRequest.PullRequestId)]($(System.PullRequest.SourceRepositoryURI)/pullrequest/$(System.PullRequest.PullRequestId)) build Success!**

        > $(Build.SourceVersionMessage)
        >
        > created by `$(Build.RequestedFor)`.

        Following is the preview URL

        **[http://$(STORAGE)--build--$(Build.BuildID).dg-app.com/](http://$(STORAGE)--build--$(Build.BuildID).dg-app.com/)**

  - template: .azure-pipelines/jobs/deploy-azure.yml
    parameters:
      condition: in(variables['Build.SourceBranch'], 'refs/heads/master')
      AZURE_SUBSCRIPTION: "${{variables.AZURE_SUBSCRIPTION}}"
      CONTAINER_NAME: $web

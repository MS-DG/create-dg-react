# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true # batch changes if true (the default); start a new build for every push if false
  branches:
    include: [master, prod] # branch names which will trigger a build
    # exclude: [ string ] # branch names which will not
  # tags:
  #   include: [ string ] # tag names which will trigger a build
  #   exclude: [ string ] # tag names which will not
  paths:
    # include: [web] # file paths which must match to trigger a build
    exclude: [.vscode] # file paths which will not trigger a build

# PR triggers are only supported in GitHub and Bitbucket Cloud.
# If you are using Azure Repos Git,
# you can configure a branch policy for build validation in order to trigger your pipeline for validation.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?#pr-triggers
# https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?#build-validation
pr:
  autoCancel: true
  branches:
    include: # branch names which will trigger a build
      - "master"
      - "prod"
      - "devmaster"

jobs:
  - job: web_build # name of the deployment job, A-Z, a-z, 0-9, and underscore
    displayName: Build ${{variables['Build.SourceBranchName']}} to Static Website # friendly name to display in the UI
    # variables:
    #   CI: true # react-scripts test need CI to be true
    #   REACT_APP_API_ROOT: "/"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "10.x"
        displayName: "Install Node.js"

      - task: npmAuthenticate@0
        inputs:
          workingFile: .npmrc
        displayName: AUTHENTICATE

      - bash: "cp .env.${Build_SourceBranchName} .env.local 2>/dev/null || :"
        displayName: Init ${{variables['Build.SourceBranchName']}} .env

      - script: npm ci
        displayName: "npm ci"

      - script: npm run build --if-present
        displayName: "BUILD"

      - script: npm test
        displayName: "TEST"

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "junit.xml"
          mergeTestResults: true
          testRunTitle: "Jest Test"

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"
          reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"

      - script: npm run format --if-present
        displayName: "Format"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: drop"
        inputs:
          PathtoPublish: "build"

  - deployment: web_deployment # name of the deployment job, A-Z, a-z, 0-9, and underscore
    displayName: Deploy web site to azure blob CDN # friendly name to display in the UI
    pool: # see pool schema
      vmImage: "windows-2019"
    dependsOn: web_build
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master','refs/heads/prod'))
    continueOnError: false # 'true' if future jobs should run even if this job fails; defaults to 'false'
    timeoutInMinutes: 5 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    variables:
      # set the container name will be
      SUBSCRIPTION_NAME_AND_ID: "Visual Studio Enterprise (087cc3e0-4650-424c-a20f-76e018064622)" # LIKE "
      STORAGE_NAME: ${{variables['Build.Repository.Name']}}-${{variables['Build.SourceBranchName']}}
    environment: static-web-${{variables['Build.Repository.Name']}}-${{variables['Build.SourceBranchName']}} # target environment name and optionally a resource-name to record the deployment history; format: <environment-name>.<resource-name>
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureFileCopy@3
              displayName: "AzureBlob File Copy"
              inputs:
                SourcePath: "$(Agent.BuildDirectory)/drop"
                Destination: AzureBlob
                ContainerName: "$web"
                azureSubscription: "$(SUBSCRIPTION_NAME_AND_ID)" # LIKE "Visual Studio Enterprise (087cc3e0-4650-424c-a20f-76e018064622)"
                storage: "$(STORAGE_NAME)"

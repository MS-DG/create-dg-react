# build steps templates
# install dependences and run build/test/format

parameters:
  NODE_VERSION: "12.x" # nodejs version
  CACHE_KEY: "" # cache key for node_modules, if empty will always run `npm ci`
  BUILD_ENV: "" # using a build env
  PUBLISH_BUILD: false # wether publish build packages
  PUBLISH_TEST: false # wether report test results

steps:
  - task: UseNode@1
    inputs:
      version: ${{ parameters.NODE_VERSION }}
    displayName: "Use Node.js ${{ parameters.NODE_VERSION }}"

  # using node_modules Cache
  - ${{ if parameters.CACHE_KEY }}:
      - task: Cache@2
        inputs:
          key: ${{ parameters.CACHE_KEY }}
          path: "node_modules"
          cacheHitVar: CACHE_RESTORED
      - task: npmAuthenticate@0
        condition: ne(variables.CACHE_RESTORED, 'true')
        inputs:
          workingFile: .npmrc
      - script: npm install --no-audit --progress=false
        condition: ne(variables.CACHE_RESTORED, 'true')
        displayName: "npm install"
  # install without cache
  - ${{ if not(parameters.CACHE_KEY) }}:
      - task: npmAuthenticate@0
        inputs:
          workingFile: .npmrc
        displayName: AUTHENTICATE
      - script: npm ci
        displayName: "npm ci"

  # using build env
  - ${{ if parameters.BUILD_ENV }}:
      - bash: "cp .env.${{ parameters.BUILD_ENV }} .env.local 2>/dev/null || echo SKIP"
        displayName: Init ${{ parameters.BUILD_ENV }} .env

  # build
  - script: npm run build --if-present
    displayName: "BUILD"
  - ${{ if eq(parameters.PUBLISH_BUILD, true) }}:
      - script: npx react-snap
        displayName: "react-snap"
      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: drop"
        inputs:
          PathtoPublish: "build"

  # run all tests
  - script: npm test
    displayName: "TEST"
  - ${{ if eq(parameters.PUBLISH_TEST, true) }}:
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "junit.xml"
          mergeTestResults: true
          testRunTitle: "Jest Test"
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"

  # format checking
  - script: npm run format --if-present
    displayName: "FORMAT"
